pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Stage 1: Building the code...'
                    echo 'Tool: Maven'
                }
            }
            post {
                success {
                    mail to: "angelo.mouzouris@gmail.com",
                         subject: "Build Status Email - Success",
                         body: "The build was successful."
                }
                failure {
                    mail to: "angelo.mouzouris@gmail.com",
                         subject: "Build Status Email - Failure",
                         body: "The build failed."
                }
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Stage 2: Running Unit and Integration Tests...'
                    echo 'Tool: JUnit for Unit Tests, TestNG for Integration Tests'
                }
            }
            post {
                always {
                    // Capture the logs manually in case attachLog fails
                    script {
                        def logFile = "${env.WORKSPACE}/unit-integration-tests.log"
                        writeFile file: logFile, text: currentBuild.rawBuild.getLog(1000).join("\n")
                    }
                    emailext attachLog: true,
                             attachmentsPattern: 'unit-integration-tests.log',
                             to: "angelo.mouzouris@gmail.com",
                             subject: "Unit and Integration Tests - ${currentBuild.currentResult}",
                             body: """
                             The stage 'Unit and Integration Tests' has completed with status: ${currentBuild.currentResult}.
                             Job: ${env.JOB_NAME}
                             Build Number: ${env.BUILD_NUMBER}
                             More info at: ${env.BUILD_URL}
                             """
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo 'Stage 3: Analyzing Code...'
                    echo 'Tool: SonarQube'
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo 'Stage 4: Performing Security Scan...'
                    echo 'Tool: OWASP Dependency-Check'
                }
            }
            post {
                always {
                    // Capture the logs manually in case attachLog fails
                    script {
                        def logFile = "${env.WORKSPACE}/security-scan.log"
                        writeFile file: logFile, text: currentBuild.rawBuild.getLog(1000).join("\n")
                    }
                    emailext attachLog: true,
                             attachmentsPattern: 'security-scan.log',
                             to: "angelo.mouzouris@gmail.com",
                             subject: "Security Scan - ${currentBuild.currentResult}",
                             body: """
                             The stage 'Security Scan' has completed with status: ${currentBuild.currentResult}.
                             Job: ${env.JOB_NAME}
                             Build Number: ${env.BUILD_NUMBER}
                             More info at: ${env.BUILD_URL}
                             """
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Stage 5: Deploying to Staging...'
                    echo 'Tool: AWS CLI for deploying to an AWS EC2 instance'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Stage 6: Running Integration Tests on Staging...'
                    echo 'Tool: Selenium'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Stage 7: Deploying to Production...'
                    echo 'Tool: AWS CLI for deploying to an AWS EC2 instance'
                }
            }
        }
    }
    
    post {
        always {
            echo 'This will always run after all stages.'
        }
        success {
            mail to: "angelo.mouzouris@gmail.com",
                 subject: "Pipeline Success",
                 body: "The pipeline completed successfully."
        }
        failure {
            mail to: "angelo.mouzouris@gmail.com",
                 subject: "Pipeline Failure",
                 body: "The pipeline failed."
        }
    }
}
